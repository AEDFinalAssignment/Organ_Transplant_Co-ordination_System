/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.HospitalAdminWorkArea;

import System.EcoSystem;
import System.Hospital.Hospital;
import System.Hospital.Staff.Staff;
import System.Hospital.Staff.StaffDirectory;
import Userinterface.SysAdminWorkArea.ManageHospital;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanjeev
 */
public class UpdateStaffdetails extends javax.swing.JPanel {

    /**
     * Creates new form UpdateStaffdetails
     */
     private EcoSystem system;
    private JSplitPane jSplitPane1;
    private String Username;
    JPanel Hospitalmain;
    public UpdateStaffdetails(JSplitPane jSplitPane1,EcoSystem system,String Username,JPanel Hospitalmain) throws SQLException {
        initComponents();
        this.jSplitPane1 = jSplitPane1;
        this.system = system;
        this.Username = Username;
        this.Hospitalmain=Hospitalmain;
        populatetblDoctor(this.Username);
        populatetblStaff(this.Username);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        btnView1 = new javax.swing.JButton();
        btnDelete1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();
        btnView2 = new javax.swing.JButton();
        btnDelete2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Staff ID ", "Name", "Contact No", "Mail ID ", "Qualification ", "Specialisation ", "Transplant Authorisation "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoctor);
        if (tblDoctor.getColumnModel().getColumnCount() > 0) {
            tblDoctor.getColumnModel().getColumn(5).setHeaderValue("Specialisation ");
            tblDoctor.getColumnModel().getColumn(6).setHeaderValue("Transplant Authorisation ");
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 136, 951, 210));

        btnView1.setText("View ");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });
        add(btnView1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1153, 167, 61, -1));

        btnDelete1.setText("Delete");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });
        add(btnDelete1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1153, 264, -1, -1));

        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Staff ID ", "Name", "Contact No", "Mail ID ", "Qualification "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblStaff);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 568, 951, 210));

        btnView2.setText("View ");
        btnView2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView2ActionPerformed(evt);
            }
        });
        add(btnView2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1133, 618, -1, -1));

        btnDelete2.setText("Delete");
        btnDelete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete2ActionPerformed(evt);
            }
        });
        add(btnDelete2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1133, 701, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Doctor Details :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 36, 225, 23));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Other Staff Details :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 470, 225, 23));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/back.png"))); // NOI18N
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 11, 40, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctor.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a doctor to view.");
            return;
        }
        
        DefaultTableModel modeldoc = (DefaultTableModel) tblDoctor.getModel();
        Staff selectedStaff = (Staff) modeldoc.getValueAt(selectedRowIndex, 0);
        
        ManageStaffdetails msd = new ManageStaffdetails(jSplitPane1,system,Username,selectedStaff.getStaff_ID(),Hospitalmain);
        jSplitPane1.setRightComponent(msd);
    }//GEN-LAST:event_btnView1ActionPerformed

    private void btnView2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView2ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblStaff.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a doctor to view.");
            return;
        }
        
        DefaultTableModel modelstaff = (DefaultTableModel) tblStaff.getModel();
        Staff selectedStaff = (Staff) modelstaff.getValueAt(selectedRowIndex, 0);
        
        ManageStaffdetails msd = new ManageStaffdetails(jSplitPane1,system,Username,selectedStaff.getStaff_ID(),Hospitalmain);
        jSplitPane1.setRightComponent(msd);
    }//GEN-LAST:event_btnView2ActionPerformed

    private void btnDelete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete2ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblStaff.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a Staff to delete.");
            return;
        }
        
        DefaultTableModel modelstaff = (DefaultTableModel) tblStaff.getModel();
        Staff selectedStaff = (Staff) tblStaff.getValueAt(selectedRowIndex, 0);
        
        for(Hospital H : system.getHospitalDirectory().getHospitalDirectory()){
            H.getStaffDirectory().getStaffDirectory().remove(selectedStaff);
        }
        
        try {
            system.deleteHosStaffDB(selectedStaff);
        } catch (SQLException ex) {
            Logger.getLogger(ManageHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(this, "Staff details deleted sucessfully");
        try {
            populatetblStaff(Username);
        } catch (SQLException ex) {
            Logger.getLogger(ManageHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDelete2ActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctor.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a Staff to delete.");
            return;
        }
        
        DefaultTableModel modelstaff = (DefaultTableModel) tblDoctor.getModel();
        Staff selectedStaff = (Staff) tblDoctor.getValueAt(selectedRowIndex, 0);
        
        for(Hospital H : system.getHospitalDirectory().getHospitalDirectory()){
            H.getStaffDirectory().getStaffDirectory().remove(selectedStaff);
        }
        
        try {
            system.deleteHosStaffDB(selectedStaff);
        } catch (SQLException ex) {
            Logger.getLogger(ManageHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(this, "Staff detHospitalails deleted sucessfully");
        try {
            populatetblDoctor(Username);
        } catch (SQLException ex) {
            Logger.getLogger(ManageHospital.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        // TODO add your handling code here:

        jSplitPane1.setRightComponent(Hospitalmain);
    }//GEN-LAST:event_jLabel11MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnDelete2;
    private javax.swing.JButton btnView1;
    private javax.swing.JButton btnView2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblStaff;
    // End of variables declaration//GEN-END:variables

    private void populatetblDoctor(String Username) throws SQLException {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        model.setRowCount(0);
        
        StaffDirectory StaffDirectory;
        StaffDirectory = system.getDBStaffDirectory();   
        
        for(Staff s: StaffDirectory.getStaffDirectory())
        {
            if(s.getDesignation().equals("Doctor") && s.getHospitalUsername().equals(Username))
            {
            Object[] row = new Object[9];
             row[0]=s;
             row[1]=s.getName();
             row[2]=s.getConNumber();
             row[3]=s.getEmailID();
             row[4]=s.getQualification();
             row[5]=s.getSpecialization();
             row[6]=s.isAuthorization();
             
             model.addRow(row);
            }
        }
    }

    private void populatetblStaff(String Username) throws SQLException {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

       DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
        model.setRowCount(0);
        
        StaffDirectory StaffDirectory;
        StaffDirectory = system.getDBStaffDirectory();   
        
        for(Staff s: StaffDirectory.getStaffDirectory())
        {
            if(!s.getDesignation().equals("Doctor") && s.getHospitalUsername().equals(Username))
            {
            Object[] row = new Object[9];
             row[0]=s;
             row[1]=s.getName();
             row[2]=s.getConNumber();
             row[3]=s.getEmailID();
             row[4]=s.getQualification();
             row[5]=s.getSpecialization();
             row[6]=s.isAuthorization();
             
             model.addRow(row);
        }
    }
    }
}
